         

         


         
             Tech 
         
         | 
     
        12/12/2013 @ 10:38AM
             | 4 views
     
		 Is Reddit's Success The Result Of A Happy Accident Of Code? 




             
         

     
         
         
         
             

             
                 
                     comments,  called-out
                 
             
                 Comment Now 
			 




     

     
	 
		 
			 Follow Comments 
		 

		 
			 Following Comments 
		 

		 
			 Unfollow Comments 
		 
	 
	 
	 
     
     
			 
         
         
         
             Comment Now 
			 




     

     
	 
		 
			 Follow Comments 
		 

		 
			 Following Comments 
		 

		 
			 Unfollow Comments 
		 
	 
	 
	 
     
     
			 
     
     
     
                     

                     

     


		 


	        
 
A post Monday by software developer Ian Greenleaf Young, claims that  Reddit’s empire is founded on a flawed algorithm . In question is the site’s “Hot” ranking algorithm, one of the most important pieces of code behind the self-proclaimed “front page of the internet.” Greenleaf Young has examined and tested the code and concludes that a simple transposition of terms is responsible for some seriously counterintuitive effects. He, and others, have reported this as a “bug” but Reddit does not seem to be interested in fixing it. Why would this be?  
The algorithm assesses the popularity of a post by displacing the chronology of the post in its feed (known on Reddit as a subreddit) by the log-10 of up/downvotes. The chronology is measured in 12 hour increments (45,000 seconds!) so, for instance 10,000 upvotes should have the effect of moving a story 4 12-hour periods ahead of its actual chronology, effectively attaching it to the top of the page until the positive sentiment is overtaken by time. In this way, “hottness” leads to the persistence of “newness.”  
The eccentricity of what is “hot” on Reddit has been one of its great pleasures. All manner of really wacky stuff finds its way on to that front page. It turns out, according to Greenleaf Young, systems librarian Jonathan Rochkind who  found this same bug  in May of 2012, the chaotic strange attractor that gives Reddit its funk is actually a mistake. The actual chronological displacement is generated by the last statement of the algorithm:  
return round(order + sign * seconds / 45000, 7)  
“Order” is the log-10 of the sheer difference (absolute value) between the up and downvotes of the post. This is magnitude of reaction. “Sign” indicates positive or negative sentiment. And seconds, well, you have to understand  UNIX Time Stamp  for that. Let’s just say at the moment I am writing this is is 1386730739 (UTC), or that many seconds since January 1, 1970, the geeky beginning of the UNIX “epoch.” Reddit gives each post a UTC time stamp and then uses the up and downvotes to modify that position on the timeline. “45000″ is the number of seconds in 12 hours, which whittles those billions down considerably and is a useful way to increase the impact of the voting. Amir Salihefendic has a very useful post on  how Reddit’s rankings work  if you want to understand this all better.  
But here is where Greenleaf Young and Rochkind beg to differ. They contend that the line in the equation should have been:  
return round(order  *  sign  +  seconds / 45000, 7)  
Quite logically they assume that the real equation takes a representation of voting magnitude and add or subtract it from a post’s timeline position. So upvoting a post would keep it newer longer and downvoting one would make it go away (off the bottom of the list) sooner. Makes sense to me.  
But that is not, in fact, what Reddit’s hotness algorithm does. Instead, explains Greenleaf Young, the voting coefficient is added  after  the time value is multiplied by  the sign of the sentiment. The impact of the difference is negligible for positive posts, but for negative posts it is devastating. Let’s say a post has a timeline position of 3,082 (which corresponds with my UTC timestamp above) and the magnitude of sentiment is 5 (representing roughly 100,000 votes, the use of the log scale makes the first 10 upvotes have the same impact as the next 90, which in turn have the same impact as the next 900, 9,000, etc.). If that is a net positive sentiment (i.e., 100,000 more upvotes than downvotes), the resulting score is 3,087, which, in effect, pushes the story forward in time by 5 12-hour increments (that’s the 45,000 part of the equation.) But, if the sentiment is negative, the story would not just be pushed back in time by that equivalent amount (5 12-hour increments). Instead, because the sign is multiplied by the time component of the equation, the resulting score would actually be –3,077.  
It is easy to see why Greenleaf Young sees this as a mistake. Not only can downvotes effectively make posts disappear from the hot rankings, fewer downvotes actually result in a  lower  ranking than more downvotes. Yes, this makes no sense. This troubles Greenleaf Young deeply. It seems to be a flaw in the universe. He writes:  

  Programmers tend to nurture a definition of justice that revolves around rule conformance. It’s why many of us find worldly realms like relationships or politics so intractable, and why many of us were drawn to computer science in the first place. In computation, everything is strictly deterministic. If something happens that doesn’t make sense, it can only be because our understanding of the system is incomplete. 
 
But there’s another way to look at this. This aspect of Reddit’s story ranking algorithm may be nonsensical—and may have arisen by mistake—but if it was a mistake it turned out to be a happy accident of code. It is very possible that Reddit’s success is partly due to the skewed dynamics of this algorithm. Greenleaf Young is expecting Reddit’s creators to adhere to the normal rules of physics, but this is what is so fascinating about virtual worlds (of which Reddit certainly is one), they can obey their own fictional physics.  
Let’s look at what the effects of this wacky algorithm have on behavior within its universe. First, the hot ranking gives priority to newness. Second, it gives extreme priority to positive sentiment. Third, it is extremely punishing to negative sentiment. Fourth, the log scale give the first up or down votes more weight than those that follow. And fifth, the absolute number of votes is subsumed into a score, so controversial stories rank lower than purely positive ones. When spelled out like this, I think it begins to capture Reddit’s unique character—and explain the outsize popularity of cat videos!  
The peculiar dynamics concerning downvotes have had some profound impacts on the Reddit community. Initially, I would assume, giving users the ability to downvote (which very few social networks indeed do) was probably conceived of as a way to push back against trolling and other forms of negative online behavior. But it has had a curious side effect. Because an initial downvote or two can push a post prematurely out of the hotness universe, some troll-like users have been very aggressive about whack-a-moling anything they don’t like. And in this alternate universe, each action has an  unequal  and opposite reaction. So partisans of topics that have trolls voting them down in turn become super-aggressive about voting their favorite things  up ! This has led (euphemistically) to higher levels of user engagement and high levels of obsessiveness and territoriality in some of the subreddits. I would argue that this did not happen by design.  
My theory is that this may indeed have initially been a mistaken bit of code—but it  worked , really well. Like the goose that lays the golden egg, we do not question because we need the eggs. And I think this raise some interesting issues about startups and about code.  
There is a good case to be made that most successful startups are  mainly lucky . Afterwards, stories are crafted to make it seem like everyone knew what they were doing all along, but there are a lot of smart people with equally good ideas that never catch fire. But the important point about startups, in my experience, is that by putting yourself into a problem space and banging your head (repeatedly) against that wall, you are available to these kinds of happy accidents. Twitter may have been born in a desperate weekend, but co-founder Jack Dorsey had been working on the idea of the “status check” for many years. Twitter was just the form in which it took flight.  
And as much as I enjoyed Greenleaf Young’s examination of Reddit’s algorithm, I’m coming at code form the opposite direction. Many people I have talked to divide programmers in two groups, the ones who enter through the door of math and logic and the ones who enter through the door of language. All programming languages are symbolic (in other words this  is  that, not just  like  that), but they are also  languages . The math-based coders, like Greenleaf Young, expect it all to make sense. It bothers them deeply if it does not. Language-based coders expect things to be messy and they accept a certain amount of that as necessary to make anything new. Reddit, by this account, seems to be driven more from the language side. 




	 
		 
			 Move up http://i.forbesimg.com t 
			 Move down 
		 






         
             
                 
                 
                         
             
             
                    The Hoaxer, The Troll And The Running Of The Digital Herd
             


	             
	            		 
	                	 

	                     Anthony Wing Kosner 
	                     Contributor 
	                 
	             
         



         
             
                 
                 
                         
             
             
                    What Reddit and Hipmunk's Alexis Ohanian Gets About How The Internet Really Works
             


	             
	            		 
	                	 

	                     Anthony Wing Kosner 
	                     Contributor 
	                 
	             
         



         
             
                 
                 
                         
             
             
                    Learn To Code #2: The Many Reasons Why We Must Program (And The Few Why Not)
             


	             
	            		 
	                	 

	                     Anthony Wing Kosner 
	                     Contributor 
	                 
	             
         



         
             
                 
                 
                         
             
             
                    Learn To Code #1: Does Everybody Really Need To Program?
             


	             
	            		 
	                	 

	                     Anthony Wing Kosner 
	                     Contributor 
	                 
	             
         

     



         
         
http://www.forbes.com/sites/anthonykosner/2013/12/12/is-reddits-success-the-result-of-a-happy-accident-of-code/